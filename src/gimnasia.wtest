import club.*
import persona.*
import rutina.*

describe "rutinas" {

	//Punto 1: rutinas
	const correrEnLaPlaya = new Running(intensidad=1.2)// Una actividad de running con intensisdad 1.2
	const remarEnElDelta = new Remo()// Una actividad de remo
	const remarEnCaminoRemeros = new RemoCompeticion()// Una actividad de remo comptetitivo
	const maratonBA = new Maraton(intensidad=1.5)//Una maraton con intensidad 1.5

	//Punto 2: personas
	const calamardo = new PersonaSedentaria(peso=60, tiempoQueEjercita=5)
 	const bob = new PersonaAtleta(peso=40)

	//Punto 3: clubes
	const recreo = new Predio(rutinas=[correrEnLaPlaya, maratonBA])
	const nautico = new Predio(rutinas=[remarEnElDelta, remarEnCaminoRemeros])//un predio con remarEnElDelta y remarEnCaminoRemeros
	
	const clubBarrial = new Club(predios=[recreo, nautico])//un club con recreo y nautico
//	
//
// PUNTO 1
	test "1.1 consulta running" {
		assert.equals(360, calamardo.caloriasQueQuema(correrEnLaPlaya))
		assert.equals(10200, bob.caloriasQueQuema(correrEnLaPlaya))
	}

	test "1.2 consulta maraton" {
		assert.equals(900, calamardo.caloriasQueQuema(maratonBA))
		assert.equals(25500, bob.caloriasQueQuema(maratonBA))
	}

	test "1.3 consulta remo" {
		assert.equals(520, calamardo.caloriasQueQuema(remarEnElDelta))
		assert.equals(9360, bob.caloriasQueQuema(remarEnElDelta))
	}

	test "1.4 consulta remo competitivo" {
		assert.equals(510, calamardo.caloriasQueQuema(remarEnCaminoRemeros))
		assert.equals(12750, bob.caloriasQueQuema(remarEnCaminoRemeros))
	}

	//Punto 2: Personas
	//ATENCION: usar el metodo truncate(3) para truncar un numero a 3 decimales
	// Ej: 1.2345.truncate(3) -> devuelve 1.234 
	
	test '2.1.1 test sedentario running' {
		calamardo.realizarRutina(correrEnLaPlaya)
		assert.equals(59.948, calamardo.peso().truncate(3))
	} 
	
	test '2.1.2 test sedentario maraton' {
		calamardo.realizarRutina(maratonBA)
		assert.equals(59.871, calamardo.peso().truncate(3))
	} 

	test '2.1.3 test sedentario remo' {
		calamardo.realizarRutina(remarEnElDelta)
		assert.equals(59.925, calamardo.peso().truncate(3))
	} 

	test '2.1.3 test sedentario remo competicion' {
		calamardo.realizarRutina(remarEnCaminoRemeros)
		assert.equals(59.927, calamardo.peso().truncate(3))
	} 
	
	test '2.1.5 test sedentario no puede practicar' {
		calamardo.peso(40)
		assert.throwsException({calamardo.realizarRutina(correrEnLaPlaya)})
		assert.equals(40, calamardo.peso())
	} 
	
	test "2.2.1 test atleta running" {
		bob.realizarRutina(correrEnLaPlaya)
		assert.equals(39.725, bob.peso().truncate(3))
	}

	test "2.2.2 test atleta maraton" {
		bob.realizarRutina(maratonBA)
		assert.equals(37.812, bob.peso().truncate(3))
	 }

	test "2.2.3 test atleta remo" {
		assert.throwsException({bob.realizarRutina(remarEnElDelta)})
		assert.equals(40, bob.peso().truncate(3))
	}

	test "2.2.3 test atleta remo de competición" {
		bob.realizarRutina(remarEnCaminoRemeros)
		assert.equals(39.406, bob.peso().truncate(3))
	}
	 
	//punto 3: Consultas
	test "3.1 el mejor predio" {
		assert.equals(recreo, clubBarrial.mejorPredio(bob))
		assert.equals(recreo, clubBarrial.mejorPredio(calamardo))
	}	
	
	test "3.2 predios tranquis" {
		assert.equals([], clubBarrial.prediosTranquis(bob))
		assert.equals([recreo], clubBarrial.prediosTranquis(calamardo))
	}
	
	test "3.3 rutinas más exigentes" {
		assert.equals([maratonBA, remarEnCaminoRemeros], clubBarrial.rutinasMasExigentes(bob))
		assert.equals([maratonBA, remarEnElDelta], clubBarrial.rutinasMasExigentes(calamardo))
	}
	
}